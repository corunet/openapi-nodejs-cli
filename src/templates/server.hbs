import express, { NextFunction, Request, Response } from 'express';


{{#if description}}
/**
  {{description}}
 */
{{/if}}

const app = express();

{{#components.schemas}}
interface {{name}} {
    {{#each properties}}
        {{@key}}{{#unless (includes ../required @key)}}?{{/unless}}: {{{this.type}}}
    {{/each}}
}
{{/components.schemas}}

{{#paths}}
{{#methods}}
{{#if requestBody.required}}
{{#if parameters}}
app.{{methodName}}('{{{../route}}}', (req: Request<{ {{#parameters}}{{name}}: {{type}},{{/parameters}} }, {}, {{#with requestBody.content.[application/json]}}{{{this.type}}}{{/with}}>, res: Response) => {
{{/if}}
{{/if}}
{{#if requestBody.required}}
{{#unless parameters}}
app.{{methodName}}('{{{../route}}}', (req: Request<{}, {}, {{#with requestBody.content.[application/json]}}{{{this.type}}}{{/with}}>, res: Response) => {
{{/unless}}
{{/if}}
{{#unless requestBody.required}}
{{#if parameters}}
app.{{methodName}}('{{{../route}}}', (req: Request<{ {{#parameters}}{{name}}: {{type}},{{/parameters}} }>, res: Response) => {
{{/if}}
{{/unless}}
{{#unless requestBody.required}}
{{#unless parameters}}
app.{{methodName}}('{{{../route}}}', (req: Request, res: Response) => {
{{/unless}}
{{/unless}}
    {{#if requestBody.required}}
    if (
        req.body === undefined
    ) {
        res.sendStatus(400);
        return;
    }

    {{/if}}
    res.sendStatus(200);
});

{{/methods}}
{{/paths}}
app.use((req: Request, res: Response, next: NextFunction) => {
    res.sendStatus(404)
})

app.listen(3000, () => {
    console.log('Server listening on port 3000...');
});
